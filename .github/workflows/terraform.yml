name: Terraform CI/CD
on:
  workflow_dispatch:
  push:
    branches:
      - develop
      - qa
      - staging
      - prod
    paths-ignore:
      - ".images/**"
  pull_request:
    branches:
      - develop
      - qa
      - staging
      - prod
      - "feature/**"
      - "hotfix/**"
      - "bugfix/**"
    paths-ignore:
      - ".images/**"

jobs:
  set_environment:
    env:
      BRANCH_NAME: ${{ github.base_ref || github.ref_name }}
    outputs:
      stage: ${{ steps.check_environment.outputs.stage }}
      aws_key: ${{ steps.check_environment.outputs.aws_key }}
      aws_key_secret: ${{ steps.check_environment.outputs.aws_key_secret }}
    runs-on: ubuntu-latest
    steps:
    - id: check_environment
      run: |
        echo "::set-output name=stage::${{ env.BRANCH_NAME }}"

        if [[ env.BRANCH_NAME != 'production' ]]; then
          echo "::set-output name=aws_key::NONPROD_AWS_ACCESS_KEY_ID"
          echo "::set-output name=aws_key_secret::NONPROD_AWS_SECRET_ACCESS_KEY"
        else
          echo "::set-output name=aws_key::AWS_ACCESS_KEY_ID"
          echo "::set-output name=aws_key_secret::AWS_SECRET_ACCESS_KEY"
        fi
  terraform:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: set_environment
    # environment: 
    #   name: ${{ needs.set_environment.outputs.stage }}
    env:
      STAGE: ${{ needs.set_environment.outputs.stage }}
    steps:
      # Test V3
      - name: Checkout
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: us-east-1
      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt install python3-pip python3-setuptools jq
          sudo pip3 install terraenv awscli
          terraenv terragrunt install
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 0.14.6
      - name: Terraform Format
        id: fmt
        run: make fmt-check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: make init
      - name: Terraform Validate
        id: validate
        run: make init validate
      - name: plan
        id: plan
        if: ${{ github.event_name == 'pull_request' }}
        run: make plan
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      # - name: apply
      #   if: ${{ github.event_name == 'push' }}
      #   run: |
      #     set -e
      #     make apply-ci
